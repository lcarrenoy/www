[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Projects",
    "section": "",
    "text": "Dashboard Houses Sales\n\n\n\n\n\n\nTableau\n\n\nDashboard\n\n\n\n\n\n\n\n\n\nJun 3, 2024\n\n\nLuis Carreño\n\n\n\n\n\n\n\n\n\n\n\n\nFull width graph\n\n\n\n\n\n\nR Studio\n\n\nGraphics\n\n\n\n\n\n\n\n\n\nJun 3, 2024\n\n\nLuis Carreño\n\n\n\n\n\n\n\n\n\n\n\n\nBar Chart\n\n\n\n\n\n\nRstudio\n\n\nGraphics\n\n\n\n\n\n\n\n\n\nMay 31, 2024\n\n\nBar Chart\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "Blog.html",
    "href": "Blog.html",
    "title": "Blog",
    "section": "",
    "text": "There are many datasets like\nairquality - New York Air Quality Measurements AirPassengers - Monthly Airline Passenger Numbers 1949-1960 mtcars - Motor Trend Car Road Tests iris - Edgar Anderson’s Iris Data\n\nCode#Fameous Dataset in R\nmtcars\n\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nValiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nMerc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nFiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\nFiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nFerrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\nVolvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n\n\n\n\nCodesummary(mtcars)\n\n      mpg             cyl             disp             hp       \n Min.   :10.40   Min.   :4.000   Min.   : 71.1   Min.   : 52.0  \n 1st Qu.:15.43   1st Qu.:4.000   1st Qu.:120.8   1st Qu.: 96.5  \n Median :19.20   Median :6.000   Median :196.3   Median :123.0  \n Mean   :20.09   Mean   :6.188   Mean   :230.7   Mean   :146.7  \n 3rd Qu.:22.80   3rd Qu.:8.000   3rd Qu.:326.0   3rd Qu.:180.0  \n Max.   :33.90   Max.   :8.000   Max.   :472.0   Max.   :335.0  \n      drat             wt             qsec             vs        \n Min.   :2.760   Min.   :1.513   Min.   :14.50   Min.   :0.0000  \n 1st Qu.:3.080   1st Qu.:2.581   1st Qu.:16.89   1st Qu.:0.0000  \n Median :3.695   Median :3.325   Median :17.71   Median :0.0000  \n Mean   :3.597   Mean   :3.217   Mean   :17.85   Mean   :0.4375  \n 3rd Qu.:3.920   3rd Qu.:3.610   3rd Qu.:18.90   3rd Qu.:1.0000  \n Max.   :4.930   Max.   :5.424   Max.   :22.90   Max.   :1.0000  \n       am              gear            carb      \n Min.   :0.0000   Min.   :3.000   Min.   :1.000  \n 1st Qu.:0.0000   1st Qu.:3.000   1st Qu.:2.000  \n Median :0.0000   Median :4.000   Median :2.000  \n Mean   :0.4062   Mean   :3.688   Mean   :2.812  \n 3rd Qu.:1.0000   3rd Qu.:4.000   3rd Qu.:4.000  \n Max.   :1.0000   Max.   :5.000   Max.   :8.000  \n\n\n\n\nCodeplot(mtcars$mpg,mtcars$wt)\n\n\n\n\n\n\n\n\n\n\n\nCodestr(mtcars)\n\n'data.frame':   32 obs. of  11 variables:\n $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...\n $ disp: num  160 160 108 258 360 ...\n $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...\n $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...\n $ qsec: num  16.5 17 18.6 19.4 17 ...\n $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...\n $ am  : num  1 1 1 0 0 0 0 0 0 0 ...\n $ gear: num  4 4 4 3 3 3 3 4 4 4 ...\n $ carb: num  4 4 1 1 2 1 4 2 2 4 ...\n\n\n\n\nCodesummary(mtcars)\n\n      mpg             cyl             disp             hp       \n Min.   :10.40   Min.   :4.000   Min.   : 71.1   Min.   : 52.0  \n 1st Qu.:15.43   1st Qu.:4.000   1st Qu.:120.8   1st Qu.: 96.5  \n Median :19.20   Median :6.000   Median :196.3   Median :123.0  \n Mean   :20.09   Mean   :6.188   Mean   :230.7   Mean   :146.7  \n 3rd Qu.:22.80   3rd Qu.:8.000   3rd Qu.:326.0   3rd Qu.:180.0  \n Max.   :33.90   Max.   :8.000   Max.   :472.0   Max.   :335.0  \n      drat             wt             qsec             vs        \n Min.   :2.760   Min.   :1.513   Min.   :14.50   Min.   :0.0000  \n 1st Qu.:3.080   1st Qu.:2.581   1st Qu.:16.89   1st Qu.:0.0000  \n Median :3.695   Median :3.325   Median :17.71   Median :0.0000  \n Mean   :3.597   Mean   :3.217   Mean   :17.85   Mean   :0.4375  \n 3rd Qu.:3.920   3rd Qu.:3.610   3rd Qu.:18.90   3rd Qu.:1.0000  \n Max.   :4.930   Max.   :5.424   Max.   :22.90   Max.   :1.0000  \n       am              gear            carb      \n Min.   :0.0000   Min.   :3.000   Min.   :1.000  \n 1st Qu.:0.0000   1st Qu.:3.000   1st Qu.:2.000  \n Median :0.0000   Median :4.000   Median :2.000  \n Mean   :0.4062   Mean   :3.688   Mean   :2.812  \n 3rd Qu.:1.0000   3rd Qu.:4.000   3rd Qu.:4.000  \n Max.   :1.0000   Max.   :5.000   Max.   :8.000"
  },
  {
    "objectID": "posts/postwithplot/index.html",
    "href": "posts/postwithplot/index.html",
    "title": "plot With Code",
    "section": "",
    "text": "This is a post with plot.\n\nCodeplot(mtcars)"
  },
  {
    "objectID": "Books.html",
    "href": "Books.html",
    "title": "Books",
    "section": "",
    "text": "E-books:\n\n“Practical Programming for Business: A Practical Guide to Computer Science using R”\n“Practical Programming for Business: A Practical Guide to Computer Science using Python”\n“Practical SQL: A Guide to Querying”"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Full width graph",
    "section": "",
    "text": "This is an example of Full width graph.\n\n\n\n\n\n\nTip with Graphics\n\n\n\ncolumn: screen; out-width: 100%; layout-ncol: 4\n\n\nThe following graph is gonna take 100% of the width, not only the text area width.\nCodelibrary(patchwork)\nlibrary(ggplot2)\n\nggplot(mtcars) + geom_point(aes(mpg, disp))\nggplot(mtcars) + geom_boxplot(aes(gear, disp, group = gear))\nggplot(mtcars) + geom_smooth(aes(disp, qsec))\n## `geom_smooth()` using method = 'loess' and formula = 'y ~ x'\nggplot(mtcars) + geom_bar(aes(carb))"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "Dashboards.html",
    "href": "Dashboards.html",
    "title": "Dashboards",
    "section": "",
    "text": "&lt;script type='text/javascript'&gt;                    var divElement = document.getElementById('viz1719127940127');                    var vizElement = divElement.getElementsByTagName('object')[0];                    if ( divElement.offsetWidth &gt; 800 ) { vizElement.style.minWidth='1366px';vizElement.style.maxWidth='100%';vizElement.style.minHeight='795px';vizElement.style.maxHeight=(divElement.offsetWidth*0.75)+'px';} else if ( divElement.offsetWidth &gt; 500 ) { vizElement.style.minWidth='1366px';vizElement.style.maxWidth='100%';vizElement.style.minHeight='795px';vizElement.style.maxHeight=(divElement.offsetWidth*0.75)+'px';} else { vizElement.style.width='100%';vizElement.style.height='1977px';}                     var scriptElement = document.createElement('script');                    scriptElement.src = 'https://public.tableau.com/javascripts/api/viz_v1.js';                    vizElement.parentNode.insertBefore(scriptElement, vizElement);                &lt;/script&gt; ```"
  },
  {
    "objectID": "Blog.html#summary",
    "href": "Blog.html#summary",
    "title": "Blog",
    "section": "",
    "text": "Codesummary(mtcars)\n\n      mpg             cyl             disp             hp       \n Min.   :10.40   Min.   :4.000   Min.   : 71.1   Min.   : 52.0  \n 1st Qu.:15.43   1st Qu.:4.000   1st Qu.:120.8   1st Qu.: 96.5  \n Median :19.20   Median :6.000   Median :196.3   Median :123.0  \n Mean   :20.09   Mean   :6.188   Mean   :230.7   Mean   :146.7  \n 3rd Qu.:22.80   3rd Qu.:8.000   3rd Qu.:326.0   3rd Qu.:180.0  \n Max.   :33.90   Max.   :8.000   Max.   :472.0   Max.   :335.0  \n      drat             wt             qsec             vs        \n Min.   :2.760   Min.   :1.513   Min.   :14.50   Min.   :0.0000  \n 1st Qu.:3.080   1st Qu.:2.581   1st Qu.:16.89   1st Qu.:0.0000  \n Median :3.695   Median :3.325   Median :17.71   Median :0.0000  \n Mean   :3.597   Mean   :3.217   Mean   :17.85   Mean   :0.4375  \n 3rd Qu.:3.920   3rd Qu.:3.610   3rd Qu.:18.90   3rd Qu.:1.0000  \n Max.   :4.930   Max.   :5.424   Max.   :22.90   Max.   :1.0000  \n       am              gear            carb      \n Min.   :0.0000   Min.   :3.000   Min.   :1.000  \n 1st Qu.:0.0000   1st Qu.:3.000   1st Qu.:2.000  \n Median :0.0000   Median :4.000   Median :2.000  \n Mean   :0.4062   Mean   :3.688   Mean   :2.812  \n 3rd Qu.:1.0000   3rd Qu.:4.000   3rd Qu.:4.000  \n Max.   :1.0000   Max.   :5.000   Max.   :8.000"
  },
  {
    "objectID": "Blog.html#structure",
    "href": "Blog.html#structure",
    "title": "Blog",
    "section": "",
    "text": "Codestr(mtcars)\n\n'data.frame':   32 obs. of  11 variables:\n $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...\n $ disp: num  160 160 108 258 360 ...\n $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...\n $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...\n $ qsec: num  16.5 17 18.6 19.4 17 ...\n $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...\n $ am  : num  1 1 1 0 0 0 0 0 0 0 ...\n $ gear: num  4 4 4 3 3 3 3 4 4 4 ...\n $ carb: num  4 4 1 1 2 1 4 2 2 4 ..."
  },
  {
    "objectID": "Blog.html#summary-1",
    "href": "Blog.html#summary-1",
    "title": "Blog",
    "section": "",
    "text": "Codesummary(mtcars)\n\n      mpg             cyl             disp             hp       \n Min.   :10.40   Min.   :4.000   Min.   : 71.1   Min.   : 52.0  \n 1st Qu.:15.43   1st Qu.:4.000   1st Qu.:120.8   1st Qu.: 96.5  \n Median :19.20   Median :6.000   Median :196.3   Median :123.0  \n Mean   :20.09   Mean   :6.188   Mean   :230.7   Mean   :146.7  \n 3rd Qu.:22.80   3rd Qu.:8.000   3rd Qu.:326.0   3rd Qu.:180.0  \n Max.   :33.90   Max.   :8.000   Max.   :472.0   Max.   :335.0  \n      drat             wt             qsec             vs        \n Min.   :2.760   Min.   :1.513   Min.   :14.50   Min.   :0.0000  \n 1st Qu.:3.080   1st Qu.:2.581   1st Qu.:16.89   1st Qu.:0.0000  \n Median :3.695   Median :3.325   Median :17.71   Median :0.0000  \n Mean   :3.597   Mean   :3.217   Mean   :17.85   Mean   :0.4375  \n 3rd Qu.:3.920   3rd Qu.:3.610   3rd Qu.:18.90   3rd Qu.:1.0000  \n Max.   :4.930   Max.   :5.424   Max.   :22.90   Max.   :1.0000  \n       am              gear            carb      \n Min.   :0.0000   Min.   :3.000   Min.   :1.000  \n 1st Qu.:0.0000   1st Qu.:3.000   1st Qu.:2.000  \n Median :0.0000   Median :4.000   Median :2.000  \n Mean   :0.4062   Mean   :3.688   Mean   :2.812  \n 3rd Qu.:1.0000   3rd Qu.:4.000   3rd Qu.:4.000  \n Max.   :1.0000   Max.   :5.000   Max.   :8.000"
  },
  {
    "objectID": "Blog.html#power-city",
    "href": "Blog.html#power-city",
    "title": "Blog",
    "section": "",
    "text": "CodeCO2\n\n   Plant        Type  Treatment conc uptake\n1    Qn1      Quebec nonchilled   95   16.0\n2    Qn1      Quebec nonchilled  175   30.4\n3    Qn1      Quebec nonchilled  250   34.8\n4    Qn1      Quebec nonchilled  350   37.2\n5    Qn1      Quebec nonchilled  500   35.3\n6    Qn1      Quebec nonchilled  675   39.2\n7    Qn1      Quebec nonchilled 1000   39.7\n8    Qn2      Quebec nonchilled   95   13.6\n9    Qn2      Quebec nonchilled  175   27.3\n10   Qn2      Quebec nonchilled  250   37.1\n11   Qn2      Quebec nonchilled  350   41.8\n12   Qn2      Quebec nonchilled  500   40.6\n13   Qn2      Quebec nonchilled  675   41.4\n14   Qn2      Quebec nonchilled 1000   44.3\n15   Qn3      Quebec nonchilled   95   16.2\n16   Qn3      Quebec nonchilled  175   32.4\n17   Qn3      Quebec nonchilled  250   40.3\n18   Qn3      Quebec nonchilled  350   42.1\n19   Qn3      Quebec nonchilled  500   42.9\n20   Qn3      Quebec nonchilled  675   43.9\n21   Qn3      Quebec nonchilled 1000   45.5\n22   Qc1      Quebec    chilled   95   14.2\n23   Qc1      Quebec    chilled  175   24.1\n24   Qc1      Quebec    chilled  250   30.3\n25   Qc1      Quebec    chilled  350   34.6\n26   Qc1      Quebec    chilled  500   32.5\n27   Qc1      Quebec    chilled  675   35.4\n28   Qc1      Quebec    chilled 1000   38.7\n29   Qc2      Quebec    chilled   95    9.3\n30   Qc2      Quebec    chilled  175   27.3\n31   Qc2      Quebec    chilled  250   35.0\n32   Qc2      Quebec    chilled  350   38.8\n33   Qc2      Quebec    chilled  500   38.6\n34   Qc2      Quebec    chilled  675   37.5\n35   Qc2      Quebec    chilled 1000   42.4\n36   Qc3      Quebec    chilled   95   15.1\n37   Qc3      Quebec    chilled  175   21.0\n38   Qc3      Quebec    chilled  250   38.1\n39   Qc3      Quebec    chilled  350   34.0\n40   Qc3      Quebec    chilled  500   38.9\n41   Qc3      Quebec    chilled  675   39.6\n42   Qc3      Quebec    chilled 1000   41.4\n43   Mn1 Mississippi nonchilled   95   10.6\n44   Mn1 Mississippi nonchilled  175   19.2\n45   Mn1 Mississippi nonchilled  250   26.2\n46   Mn1 Mississippi nonchilled  350   30.0\n47   Mn1 Mississippi nonchilled  500   30.9\n48   Mn1 Mississippi nonchilled  675   32.4\n49   Mn1 Mississippi nonchilled 1000   35.5\n50   Mn2 Mississippi nonchilled   95   12.0\n51   Mn2 Mississippi nonchilled  175   22.0\n52   Mn2 Mississippi nonchilled  250   30.6\n53   Mn2 Mississippi nonchilled  350   31.8\n54   Mn2 Mississippi nonchilled  500   32.4\n55   Mn2 Mississippi nonchilled  675   31.1\n56   Mn2 Mississippi nonchilled 1000   31.5\n57   Mn3 Mississippi nonchilled   95   11.3\n58   Mn3 Mississippi nonchilled  175   19.4\n59   Mn3 Mississippi nonchilled  250   25.8\n60   Mn3 Mississippi nonchilled  350   27.9\n61   Mn3 Mississippi nonchilled  500   28.5\n62   Mn3 Mississippi nonchilled  675   28.1\n63   Mn3 Mississippi nonchilled 1000   27.8\n64   Mc1 Mississippi    chilled   95   10.5\n65   Mc1 Mississippi    chilled  175   14.9\n66   Mc1 Mississippi    chilled  250   18.1\n67   Mc1 Mississippi    chilled  350   18.9\n68   Mc1 Mississippi    chilled  500   19.5\n69   Mc1 Mississippi    chilled  675   22.2\n70   Mc1 Mississippi    chilled 1000   21.9\n71   Mc2 Mississippi    chilled   95    7.7\n72   Mc2 Mississippi    chilled  175   11.4\n73   Mc2 Mississippi    chilled  250   12.3\n74   Mc2 Mississippi    chilled  350   13.0\n75   Mc2 Mississippi    chilled  500   12.5\n76   Mc2 Mississippi    chilled  675   13.7\n77   Mc2 Mississippi    chilled 1000   14.4\n78   Mc3 Mississippi    chilled   95   10.6\n79   Mc3 Mississippi    chilled  175   18.0\n80   Mc3 Mississippi    chilled  250   17.9\n81   Mc3 Mississippi    chilled  350   17.9\n82   Mc3 Mississippi    chilled  500   17.9\n83   Mc3 Mississippi    chilled  675   18.9\n84   Mc3 Mississippi    chilled 1000   19.9\n\n\n\nCodeDNase\n\n    Run        conc density\n1     1  0.04882812   0.017\n2     1  0.04882812   0.018\n3     1  0.19531250   0.121\n4     1  0.19531250   0.124\n5     1  0.39062500   0.206\n6     1  0.39062500   0.215\n7     1  0.78125000   0.377\n8     1  0.78125000   0.374\n9     1  1.56250000   0.614\n10    1  1.56250000   0.609\n11    1  3.12500000   1.019\n12    1  3.12500000   1.001\n13    1  6.25000000   1.334\n14    1  6.25000000   1.364\n15    1 12.50000000   1.730\n16    1 12.50000000   1.710\n17    2  0.04882812   0.045\n18    2  0.04882812   0.050\n19    2  0.19531250   0.137\n20    2  0.19531250   0.123\n21    2  0.39062500   0.225\n22    2  0.39062500   0.207\n23    2  0.78125000   0.401\n24    2  0.78125000   0.383\n25    2  1.56250000   0.672\n26    2  1.56250000   0.681\n27    2  3.12500000   1.116\n28    2  3.12500000   1.078\n29    2  6.25000000   1.554\n30    2  6.25000000   1.526\n31    2 12.50000000   1.932\n32    2 12.50000000   1.914\n33    3  0.04882812   0.070\n34    3  0.04882812   0.068\n35    3  0.19531250   0.173\n36    3  0.19531250   0.165\n37    3  0.39062500   0.277\n38    3  0.39062500   0.248\n39    3  0.78125000   0.434\n40    3  0.78125000   0.426\n41    3  1.56250000   0.703\n42    3  1.56250000   0.689\n43    3  3.12500000   1.067\n44    3  3.12500000   1.077\n45    3  6.25000000   1.629\n46    3  6.25000000   1.479\n47    3 12.50000000   2.003\n48    3 12.50000000   1.884\n49    4  0.04882812   0.011\n50    4  0.04882812   0.016\n51    4  0.19531250   0.118\n52    4  0.19531250   0.108\n53    4  0.39062500   0.200\n54    4  0.39062500   0.206\n55    4  0.78125000   0.364\n56    4  0.78125000   0.360\n57    4  1.56250000   0.620\n58    4  1.56250000   0.640\n59    4  3.12500000   0.979\n60    4  3.12500000   0.973\n61    4  6.25000000   1.424\n62    4  6.25000000   1.399\n63    4 12.50000000   1.740\n64    4 12.50000000   1.732\n65    5  0.04882812   0.035\n66    5  0.04882812   0.035\n67    5  0.19531250   0.132\n68    5  0.19531250   0.135\n69    5  0.39062500   0.224\n70    5  0.39062500   0.220\n71    5  0.78125000   0.385\n72    5  0.78125000   0.390\n73    5  1.56250000   0.658\n74    5  1.56250000   0.647\n75    5  3.12500000   1.060\n76    5  3.12500000   1.031\n77    5  6.25000000   1.425\n78    5  6.25000000   1.409\n79    5 12.50000000   1.750\n80    5 12.50000000   1.738\n81    6  0.04882812   0.086\n82    6  0.04882812   0.103\n83    6  0.19531250   0.191\n84    6  0.19531250   0.189\n85    6  0.39062500   0.272\n86    6  0.39062500   0.277\n87    6  0.78125000   0.440\n88    6  0.78125000   0.426\n89    6  1.56250000   0.686\n90    6  1.56250000   0.676\n91    6  3.12500000   1.062\n92    6  3.12500000   1.072\n93    6  6.25000000   1.424\n94    6  6.25000000   1.459\n95    6 12.50000000   1.768\n96    6 12.50000000   1.806\n97    7  0.04882812   0.094\n98    7  0.04882812   0.092\n99    7  0.19531250   0.182\n100   7  0.19531250   0.182\n101   7  0.39062500   0.282\n102   7  0.39062500   0.273\n103   7  0.78125000   0.444\n104   7  0.78125000   0.439\n105   7  1.56250000   0.686\n106   7  1.56250000   0.668\n107   7  3.12500000   1.052\n108   7  3.12500000   1.035\n109   7  6.25000000   1.409\n110   7  6.25000000   1.392\n111   7 12.50000000   1.759\n112   7 12.50000000   1.739\n113   8  0.04882812   0.054\n114   8  0.04882812   0.054\n115   8  0.19531250   0.152\n116   8  0.19531250   0.148\n117   8  0.39062500   0.226\n118   8  0.39062500   0.222\n119   8  0.78125000   0.392\n120   8  0.78125000   0.383\n121   8  1.56250000   0.658\n122   8  1.56250000   0.644\n123   8  3.12500000   1.043\n124   8  3.12500000   1.002\n125   8  6.25000000   1.466\n126   8  6.25000000   1.381\n127   8 12.50000000   1.743\n128   8 12.50000000   1.724\n129   9  0.04882812   0.032\n130   9  0.04882812   0.043\n131   9  0.19531250   0.142\n132   9  0.19531250   0.155\n133   9  0.39062500   0.239\n134   9  0.39062500   0.242\n135   9  0.78125000   0.420\n136   9  0.78125000   0.395\n137   9  1.56250000   0.624\n138   9  1.56250000   0.705\n139   9  3.12500000   1.046\n140   9  3.12500000   1.026\n141   9  6.25000000   1.398\n142   9  6.25000000   1.405\n143   9 12.50000000   1.693\n144   9 12.50000000   1.729\n145  10  0.04882812   0.052\n146  10  0.04882812   0.094\n147  10  0.19531250   0.164\n148  10  0.19531250   0.166\n149  10  0.39062500   0.259\n150  10  0.39062500   0.256\n151  10  0.78125000   0.439\n152  10  0.78125000   0.439\n153  10  1.56250000   0.690\n154  10  1.56250000   0.701\n155  10  3.12500000   1.042\n156  10  3.12500000   1.075\n157  10  6.25000000   1.340\n158  10  6.25000000   1.406\n159  10 12.50000000   1.699\n160  10 12.50000000   1.708\n161  11  0.04882812   0.047\n162  11  0.04882812   0.057\n163  11  0.19531250   0.159\n164  11  0.19531250   0.155\n165  11  0.39062500   0.246\n166  11  0.39062500   0.252\n167  11  0.78125000   0.427\n168  11  0.78125000   0.411\n169  11  1.56250000   0.704\n170  11  1.56250000   0.684\n171  11  3.12500000   0.994\n172  11  3.12500000   0.980\n173  11  6.25000000   1.421\n174  11  6.25000000   1.385\n175  11 12.50000000   1.715\n176  11 12.50000000   1.721\n\n\n\nCodesearch() \n\n[1] \".GlobalEnv\"        \"package:stats\"     \"package:graphics\" \n[4] \"package:grDevices\" \"package:utils\"     \"package:datasets\" \n[7] \"package:methods\"   \"Autoloads\"         \"package:base\""
  },
  {
    "objectID": "Blog.html#graphic",
    "href": "Blog.html#graphic",
    "title": "Blog",
    "section": "",
    "text": "Codeplot(mtcars$mpg,mtcars$wt)"
  },
  {
    "objectID": "Blog.html#query",
    "href": "Blog.html#query",
    "title": "Blog",
    "section": "",
    "text": "Codemtcars\n\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nValiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nMerc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nFiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\nFiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nFerrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\nVolvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2"
  },
  {
    "objectID": "Blog.html#descriptive-statistic",
    "href": "Blog.html#descriptive-statistic",
    "title": "Blog",
    "section": "",
    "text": "Codesummary(mtcars)\n\n      mpg             cyl             disp             hp       \n Min.   :10.40   Min.   :4.000   Min.   : 71.1   Min.   : 52.0  \n 1st Qu.:15.43   1st Qu.:4.000   1st Qu.:120.8   1st Qu.: 96.5  \n Median :19.20   Median :6.000   Median :196.3   Median :123.0  \n Mean   :20.09   Mean   :6.188   Mean   :230.7   Mean   :146.7  \n 3rd Qu.:22.80   3rd Qu.:8.000   3rd Qu.:326.0   3rd Qu.:180.0  \n Max.   :33.90   Max.   :8.000   Max.   :472.0   Max.   :335.0  \n      drat             wt             qsec             vs        \n Min.   :2.760   Min.   :1.513   Min.   :14.50   Min.   :0.0000  \n 1st Qu.:3.080   1st Qu.:2.581   1st Qu.:16.89   1st Qu.:0.0000  \n Median :3.695   Median :3.325   Median :17.71   Median :0.0000  \n Mean   :3.597   Mean   :3.217   Mean   :17.85   Mean   :0.4375  \n 3rd Qu.:3.920   3rd Qu.:3.610   3rd Qu.:18.90   3rd Qu.:1.0000  \n Max.   :4.930   Max.   :5.424   Max.   :22.90   Max.   :1.0000  \n       am              gear            carb      \n Min.   :0.0000   Min.   :3.000   Min.   :1.000  \n 1st Qu.:0.0000   1st Qu.:3.000   1st Qu.:2.000  \n Median :0.0000   Median :4.000   Median :2.000  \n Mean   :0.4062   Mean   :3.688   Mean   :2.812  \n 3rd Qu.:1.0000   3rd Qu.:4.000   3rd Qu.:4.000  \n Max.   :1.0000   Max.   :5.000   Max.   :8.000"
  },
  {
    "objectID": "Blog.html#datasets---r-studio",
    "href": "Blog.html#datasets---r-studio",
    "title": "Blog",
    "section": "",
    "text": "There are many datasets like\nairquality - New York Air Quality Measurements AirPassengers - Monthly Airline Passenger Numbers 1949-1960 mtcars - Motor Trend Car Road Tests iris - Edgar Anderson’s Iris Data\n\nCode#Fameous Dataset in R\nmtcars\n\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nValiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nMerc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nFiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\nFiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nFerrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\nVolvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2"
  },
  {
    "objectID": "Blog.html#graphics---r-studio",
    "href": "Blog.html#graphics---r-studio",
    "title": "Blog",
    "section": "",
    "text": "Codeplot(mtcars$mpg,mtcars$wt)"
  },
  {
    "objectID": "Blog.html#query---sql",
    "href": "Blog.html#query---sql",
    "title": "Blog",
    "section": "",
    "text": "/* Modeling Luis Carreño */\ncreate table category (Idcategory varchar(5) not null , –c00001 Namecategory varchar(50), Estado bit not null , check (Idcategory like ‘[c][0-9][0-9][0-9][0-9]’), unique (Namecategory), primary key (Idcategory) )\ncreate table family (Idfamily varchar(5) not null , –f00001 Namefamily varchar(50), Estado bit not null , check (Idfamily like ‘[f][0-9][0-9][0-9][0-9]’), unique (Namefamily), primary key (Idfamily) )\ncreate table brand (Idbrand varchar(5) not null , –b00001 Namebrand varchar(50), Estado bit not null , check (Idbrand like ‘[b][0-9][0-9][0-9][0-9]’), unique (Namebrand), primary key (Idbrand) )\ncreate table payment (Idpayment varchar(5) not null , –y00001 Namepayment varchar(50), Estado bit not null , check (Idpayment like ‘[y][0-9][0-9][0-9][0-9]’), unique (Namepayment), primary key (Idpayment) )\ncreate table customer (Idcustomer varchar(5) not null , –n00001 Namecustomer varchar(50), Estado bit not null , check (Idcustomer like ‘[n][0-9][0-9][0-9][0-9]’), email varchar(50) null, unique (Namecustomer), primary key (Idcustomer) )\ncreate table product (Idproduct varchar(5) not null , –p00001 Idcategory varchar(5) not null , –c00001 Idbrand varchar(5) not null , –b00001 Idfamily varchar(5) not null , –f00001 Nameproduct varchar(50), price decimal (10,2) not null, Estado bit not null , check (Idproduct like ‘[p][0-9][0-9][0-9][0-9]’), unique (Nameproduct), primary key (Idproduct), foreign key (Idcategory) references category(Idcategory), foreign key (Idbrand) references brand(Idbrand), foreign key (Idfamily) references family(Idfamily),) create table invoice (Idinvoice varchar(5) not null , –i00001 Idpayment varchar(5) not null , –y00001 Idcustomer varchar(5) not null , –n00001 check (Idinvoice like ‘[i][0-9][0-9][0-9][0-9]’), primary key (Idinvoice), foreign key (Idpayment) references payment(Idpayment), foreign key (Idcustomer) references customer(Idcustomer), )\ncreate table detail (Iddetail varchar(5) not null , –d00001 Idinvoice varchar(5) not null , –i00001 Idproduct varchar(5) not null , –p00001 price decimal(10,2) not null, cant int not null, check (Iddetail like ‘[d][0-9][0-9][0-9][0-9]’), primary key (Iddetail), foreign key (Idinvoice) references invoice(Idinvoice), foreign key (Idproduct) references product(Idproduct), )\ninsert into category values (‘c0001’,‘category1’,1); insert into category values (‘c0002’,‘category2’,1); insert into category values (‘c0003’,‘category3’,1)\ninsert into family values (‘f0001’,‘familia1’,1); insert into family values (‘f0002’,‘familia2’,1); insert into family values (‘f0003’,‘familia3’,1)\ninsert into brand values (‘b0001’,‘brand1’,1); insert into brand values (‘b0002’,‘brand2’,1); insert into brand values (‘b0003’,‘brand3’,1)\ninsert into payment values (‘y0001’,‘payment1’,1); insert into payment values (‘y0002’,‘payment2’,1); insert into payment values (‘y0003’,‘payment3’,1)\ninsert into customer values (‘n0001’,‘customer1’,1,‘email1’); insert into customer values (‘n0002’,‘customer2’,1,‘email2’); insert into customer values (‘n0003’,‘customer3’,1,‘email3’)\ninsert into product values (‘p0001’,‘c0001’,‘b0001’,‘f0001’,‘Nomproduct1’,‘100’,1); insert into product values (‘p0002’,‘c0002’,‘b0002’,‘f0002’,‘Nomproduct2’,‘200’,1); insert into product values (‘p0003’,‘c0003’,‘b0003’,‘f0003’,‘Nomproduct3’,‘300’,1)\ninsert into invoice values (‘i0001’,‘y0001’,‘n0001’); insert into invoice values (‘i0002’,‘y0002’,‘n0002’); insert into invoice values (‘i0003’,‘y0003’,‘n0003’)\ninsert into detail values (‘d0001’,‘i0001’,‘p0001’,‘200’,‘5’); insert into detail values (‘d0002’,‘i0002’,‘p0002’,‘200’,‘5’); insert into detail values (‘d0003’,‘i0003’,‘p0003’,‘200’,‘5’)"
  },
  {
    "objectID": "posts/Full width graph/index.html",
    "href": "posts/Full width graph/index.html",
    "title": "Full width graph",
    "section": "",
    "text": "This is an example of Full width graph.\n\n\n\n\n\n\nTip with Graphics\n\n\n\ncolumn: screen; out-width: 100%; layout-ncol: 4\n\n\nThe following graph is gonna take 100% of the width, not only the text area width.\nCodelibrary(patchwork)\nlibrary(ggplot2)\n\nggplot(mtcars) + geom_point(aes(mpg, disp))\nggplot(mtcars) + geom_boxplot(aes(gear, disp, group = gear))\nggplot(mtcars) + geom_smooth(aes(disp, qsec))\n## `geom_smooth()` using method = 'loess' and formula = 'y ~ x'\nggplot(mtcars) + geom_bar(aes(carb))"
  },
  {
    "objectID": "Machine Learning & IA.html",
    "href": "Machine Learning & IA.html",
    "title": "Machine Learning & IA",
    "section": "",
    "text": "Code# Importing libraries\nlibrary(datasets) \nlibrary(caret) \n\n# Importing the Iris data set\ndata(iris)\n\n# Check to see if there are missing data?\nsum(is.na(iris))\n\n[1] 0\n\nCode# To achieve reproducible model; set the random seed number\nset.seed(100)\n\n# Performs stratified random split of the data set\nTrainingIndex &lt;- createDataPartition(iris$Species, p=0.8, list = FALSE)\nTrainingSet &lt;- iris[TrainingIndex,] # Training Set\nTestingSet &lt;- iris[-TrainingIndex,] # Test Set\n\n# Compare scatter plot of the 80 and 20 data subsets\n\n# SVM model (polynomial kernel)\n\n# Build Training model\nModel &lt;- train(Species ~ ., data = TrainingSet,\n               method = \"svmPoly\",\n               na.action = na.omit,\n               preProcess=c(\"scale\",\"center\"),\n               trControl= trainControl(method=\"none\"),\n               tuneGrid = data.frame(degree=1,scale=1,C=1)\n)\n\n# Build CV model\nModel.cv &lt;- train(Species ~ ., data = TrainingSet,\n                  method = \"svmPoly\",\n                  na.action = na.omit,\n                  preProcess=c(\"scale\",\"center\"),\n                  trControl= trainControl(method=\"cv\", number=10),\n                  tuneGrid = data.frame(degree=1,scale=1,C=1)\n)\n\n\n# Apply model for prediction\nModel.training &lt;-predict(Model, TrainingSet) # Apply model to make prediction on Training set\nModel.testing &lt;-predict(Model, TestingSet) # Apply model to make prediction on Testing set\nModel.cv &lt;-predict(Model.cv, TrainingSet) # Perform cross-validation\n\n# Model performance (Displays confusion matrix and statistics)\nModel.training.confusion &lt;-confusionMatrix(Model.training, TrainingSet$Species)\nModel.testing.confusion &lt;-confusionMatrix(Model.testing, TestingSet$Species)\nModel.cv.confusion &lt;-confusionMatrix(Model.cv, TrainingSet$Species)\n\nprint(Model.training.confusion)\n\nConfusion Matrix and Statistics\n\n            Reference\nPrediction   setosa versicolor virginica\n  setosa         40          0         0\n  versicolor      0         40         1\n  virginica       0          0        39\n\nOverall Statistics\n                                          \n               Accuracy : 0.9917          \n                 95% CI : (0.9544, 0.9998)\n    No Information Rate : 0.3333          \n    P-Value [Acc &gt; NIR] : &lt; 2.2e-16       \n                                          \n                  Kappa : 0.9875          \n                                          \n Mcnemar's Test P-Value : NA              \n\nStatistics by Class:\n\n                     Class: setosa Class: versicolor Class: virginica\nSensitivity                 1.0000            1.0000           0.9750\nSpecificity                 1.0000            0.9875           1.0000\nPos Pred Value              1.0000            0.9756           1.0000\nNeg Pred Value              1.0000            1.0000           0.9877\nPrevalence                  0.3333            0.3333           0.3333\nDetection Rate              0.3333            0.3333           0.3250\nDetection Prevalence        0.3333            0.3417           0.3250\nBalanced Accuracy           1.0000            0.9938           0.9875\n\nCodeprint(Model.testing.confusion)\n\nConfusion Matrix and Statistics\n\n            Reference\nPrediction   setosa versicolor virginica\n  setosa         10          0         0\n  versicolor      0          9         0\n  virginica       0          1        10\n\nOverall Statistics\n                                          \n               Accuracy : 0.9667          \n                 95% CI : (0.8278, 0.9992)\n    No Information Rate : 0.3333          \n    P-Value [Acc &gt; NIR] : 2.963e-13       \n                                          \n                  Kappa : 0.95            \n                                          \n Mcnemar's Test P-Value : NA              \n\nStatistics by Class:\n\n                     Class: setosa Class: versicolor Class: virginica\nSensitivity                 1.0000            0.9000           1.0000\nSpecificity                 1.0000            1.0000           0.9500\nPos Pred Value              1.0000            1.0000           0.9091\nNeg Pred Value              1.0000            0.9524           1.0000\nPrevalence                  0.3333            0.3333           0.3333\nDetection Rate              0.3333            0.3000           0.3333\nDetection Prevalence        0.3333            0.3000           0.3667\nBalanced Accuracy           1.0000            0.9500           0.9750\n\nCodeprint(Model.cv.confusion)\n\nConfusion Matrix and Statistics\n\n            Reference\nPrediction   setosa versicolor virginica\n  setosa         40          0         0\n  versicolor      0         40         1\n  virginica       0          0        39\n\nOverall Statistics\n                                          \n               Accuracy : 0.9917          \n                 95% CI : (0.9544, 0.9998)\n    No Information Rate : 0.3333          \n    P-Value [Acc &gt; NIR] : &lt; 2.2e-16       \n                                          \n                  Kappa : 0.9875          \n                                          \n Mcnemar's Test P-Value : NA              \n\nStatistics by Class:\n\n                     Class: setosa Class: versicolor Class: virginica\nSensitivity                 1.0000            1.0000           0.9750\nSpecificity                 1.0000            0.9875           1.0000\nPos Pred Value              1.0000            0.9756           1.0000\nNeg Pred Value              1.0000            1.0000           0.9877\nPrevalence                  0.3333            0.3333           0.3333\nDetection Rate              0.3333            0.3333           0.3250\nDetection Prevalence        0.3333            0.3417           0.3250\nBalanced Accuracy           1.0000            0.9938           0.9875\n\nCode# Feature importance\nImportance &lt;- varImp(Model)\nplot(Importance)\n\n\n\n\n\n\nCodeplot(Importance, col = \"red\")"
  }
]